@@ -1,49 +1,46 @@
 package object

 import (
 	"bufio"
 	"compress/zlib"
-	"crypto/sha1"
 	"errors"
 	"fmt"
 	"io"
 	"os"
 	"path/filepath"
 	"strconv"
 )

-func LoadByHash(blobSha string) (typ string, content []byte, err error) {
-	if len(blobSha) != 2*sha1.Size { // size of hash in hex format
-		return "", nil, fmt.Errorf("not a valid object name: %v", blobSha)
-	}
+func LoadByHash(h Hash) (typ string, content []byte, err error) {
+	name := h.String()

-	path := filepath.Join(".git", "objects", blobSha[:2], blobSha[2:])
+	path := filepath.Join(".git", "objects", name[:2], name[2:])

 	file, err := os.Open(path)
 	if errors.Is(err, os.ErrNotExist) {
-		return "", nil, fmt.Errorf("not a valid object name: %v", blobSha)
+		return "", nil, fmt.Errorf("not a valid object name")
 	}
 	if err != nil {
 		return "", nil, fmt.Errorf("read file: %w", err)
 	}

 	defer func() {
 		e := file.Close()
 		if err == nil && e != nil {
 			err = fmt.Errorf("close file: %w", e)
 		}
 	}()

 	return Load(file)
 }

 func Load(r io.Reader) (typ string, content []byte, err error) {
 	zr, err := zlib.NewReader(r)
 	if err != nil {
 		return "", nil, fmt.Errorf("new zlib reader: %w", err)
 	}

 	defer func() {
 		e := zr.Close()
 		if err == nil && e != nil {
 			err = fmt.Errorf("close zlib reader: %w", e)

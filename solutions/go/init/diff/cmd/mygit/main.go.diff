@@ -1,35 +1,29 @@
 package main

 import (
 	"fmt"
-	// Uncomment this block to pass the first stage!
-	// "os"
+	"os"
 )

 // Usage: your_git.sh <command> <arg1> <arg2> ...
 func main() {
-	// You can use print statements as follows for debugging, they'll be visible when running tests.
-	fmt.Println("Logs from your program will appear here!")
+	switch command := os.Args[1]; command {
+	case "init":
+		for _, dir := range []string{".git", ".git/objects", ".git/refs"} {
+			if err := os.Mkdir(dir, 0755); err != nil {
+				fmt.Printf("Error creating directory: %s\n", err)
+			}
+		}

-	// Uncomment this block to pass the first stage!
-	//
-	// switch command := os.Args[1]; command {
-	// case "init":
-	// 	for _, dir := range []string{".git", ".git/objects", ".git/refs"} {
-	// 		if err := os.Mkdir(dir, 0755); err != nil {
-	// 			fmt.Printf("Error creating directory: %s\n", err)
-	// 		}
-	// 	}
-	//
-	// 	headFileContents := []byte("ref: refs/heads/master\n")
-	// 	if err := os.WriteFile(".git/HEAD", headFileContents, 0644); err != nil {
-	// 		fmt.Printf("Error writing file: %s\n", err)
-	// 	}
-	//
-	// 	fmt.Println("Initialized git directory")
-	//
-	// default:
-	// 	fmt.Printf("Unknown command %s\n", command)
-	// 	os.Exit(1)
-	// }
+		headFileContents := []byte("ref: refs/heads/master\n")
+		if err := os.WriteFile(".git/HEAD", headFileContents, 0644); err != nil {
+			fmt.Printf("Error writing file: %s\n", err)
+		}
+
+		fmt.Println("Initialized git directory")
+
+	default:
+		fmt.Printf("Unknown command %s\n", command)
+		os.Exit(1)
+	}
 }

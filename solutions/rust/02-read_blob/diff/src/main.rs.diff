@@ -1,30 +1,32 @@
-#[allow(unused_imports)]
-use std::fs;
-use clap::{Parser, Subcommand};
-
-#[derive(Parser)]
-pub struct Cli {
-    #[command(subcommand)]
-    pub command: SubCommands,
-}
+extern crate core;

-#[derive(Subcommand)]
-pub enum SubCommands {
-    /// Initialise a new repository
-    Init,
-}
+use std::fs;
+use cli::Cli;
+use clap::Parser;
+use anyhow::{anyhow, Result};

+mod cli;
+mod cat_file;

 // Usage: your_git.sh <command> <arg1> <arg2> ...
-fn main() {
+fn main() -> Result<()> {
     let git_cli = Cli::parse();
     match git_cli.command {
-        SubCommands::Init => {
+        cli::SubCommands::Init => {
             fs::create_dir(".git").unwrap();
             fs::create_dir(".git/objects").unwrap();
             fs::create_dir(".git/refs").unwrap();
             fs::write(".git/HEAD", "ref: refs/heads/master\n").unwrap();
             println!("Initialized git directory")
         }
+        cli::SubCommands::CatFile { pretty_print, object } => {
+            if !pretty_print {
+                return Err(anyhow!("The `-p` flag is required"));
+            }
+
+            cat_file::pretty_cat_file(object)?;
+        }
     }
+
+    Ok(())
 }

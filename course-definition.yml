slug: "git"
name: "Build your own Git"
short_name: "Git"
release_status: "live"

# This is shown on the course overview page. Markdown supported, recommended length ~40 words.
#
# Recommended format:
#
# > ABC is <whatever>. In this challenge, you'll build your own ABC that's capable of D, E, F and G.
# >
# > Along the way, we'll learn about X, Y, Z and more.
#
# Example:
#
# > Redis is an in-memory data structure store often used as a database, cache, message broken and streaming engine. In this challenge
# > you'll build your own Redis server that is capable of serving basic commands, reading RDB files and more.
# >
# > Along the way, you'll learn about TCP servers, the Redis Protocol and more.
description_md: |-
  Git is a version control system used to track changes in source code. In this challenge, you'll build your own Git implementation that
  is capable of cloning a public repository from GitHub.

  Along the way, you'll learn about the .git directory, Git objects, plumbing commands and more.

# Keep this under 70 characters
short_description_md: |-
  Learn about git objects, plumbing commands and more

completion_percentage: 10

languages:
  - slug: "cpp"
  - slug: "go"
  - slug: "haskell"
  - slug: "javascript"
  - slug: "python"
  - slug: "ruby"
  - slug: "rust"
  - slug: "java"
    release_status: "beta"

# TODO: Add this back once builds are faster
#  kotlin: https://github.com/codecrafters-io/git-starter-kotlin

marketing:
  difficulty: hard
  sample_extension_idea_title: "Push to remote repository"
  sample_extension_idea_description: "A Git implementation that can push changes to a remote repository"
  testimonials:
    - author_name: "Beyang Liu"
      author_description: "CTO, Sourcegraph"
      author_avatar: "https://codecrafters.io/images/external/testimonials/beyang-liu.jpeg"
      link: "https://twitter.com/beyang/status/1271225214886506496"
      text: |-
        Found out about CodeCrafters from a colleague. It's a tutorial site that has you build your own version of things
        like Git and Docker from scratch. A cool way to build a stronger mental model of how those tools work.
    - author_name: "Lacronicus"
      author_description: "Reddit user"
      author_avatar: "https://codecrafters.io/images/external/testimonials/reddit-user.png"
      link: "https://www.reddit.com/r/programming/comments/fefrka/advanced_programming_challenges/fjoxu7n/"
      text: |-
        Never in my life have I needed something so much and not known until I received it.

stages:
  - slug: "init"
    name: "Initialize the .git directory"
    difficulty: very_easy
    description_md: |-
      In this stage, you'll implement the `git init` command.

      ### The `git init` command

      `git init` initializes a Git repository by creating a `.git` directory with some files
      & directories inside it.

      You can learn more about what's inside the `.git` folder [here](https://blog.meain.io/2023/what-is-in-dot-git/). We've
      included a description of the files & directores we'll be dealing with in this stage below.

      ### The `.git` directory

      At a bare minimum, a `.git` directory should contain the following files & directories:

      ```
      - .git/
        - objects/
        - refs/
        - HEAD (should contain "ref: refs/heads/main\n")
      ```

      - `objects/`
        - This directory contains [Git objects](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects).
        - We'll learn more about what Git objects are in later stages.
      - `refs/`
        - This directory contains [Git references](https://git-scm.com/book/en/v2/Git-Internals-Git-References).
        - We'll deal with this in later stages too.
      - `HEAD`
        - This file contains a reference to the currently checked out branch.
        - It's contents should be `ref: refs/heads/main\n`.

      You can learn more about these in detail [here](https://blog.meain.io/2023/what-is-in-dot-git/).

      ### Tests

      The tester will run your program in a new empty directory like this:

      ```bash
      # Create a new directory and cd into it
      $ mkdir test_dir && cd test_dir

      # Run your program
      $ /path/to/your_git.sh init
      ```

      It'll then check if the `.git` directory and its contents are created correctly.

      ```bash
      # Check if .git directory exists
      $ test -d .git

      # Check if .git/objects directory exists
      $ test -d .git/objects

      # Check if .git/refs directory exists
      $ test -d .git/refs

      # Check if .git/HEAD file exists
      $ test -f .git/HEAD

      # Check if .git/HEAD contains either "ref: refs/heads/main\n" or "ref: refs/heads/master\n"
      $ cat .git/HEAD
      ```

      ### Notes

      - Git actually creates more files & directories than the ones mentioned above when you run `git init`. We've only included the ones
        that are absolutely necessary for Git to function properly.
      - The `.git/HEAD` file has a newline at the end.
      - The `.git/HEAD` file can contain either `ref: refs/heads/main\n` or `ref: refs/heads/master\n`, the tester will
        work with either of these.
    marketing_md: |-
      In this stage, you'll implement the `git init` command. You'll initialize
      a git repository by creating a `.git` directory and some files inside it.
    tester_source_code_url: "https://github.com/codecrafters-io/git-tester/blob/03984478122959f23a866a0df102413a5ac08e67/internal/stage_init.go#L12"

  - slug: "read_blob"
    name: "Read a blob object"
    difficulty: medium
    description_md: |-
      In this stage, you'll add support for reading a blob using the `git cat-file` command.

      ### Git objects

      In this challenge, we'll deal with three [Git
      objects](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects):

      - Blobs (**This stage**)
        - These are used to store file data.
        - Blobs only store the contents of a file, not its name or permissions.
      - Trees (Future stages)
        - These are used to store directory structures.
        - The information stored can include things like what files/directories are in a tree, their names and permissions.
      - Commits (Future stages)
        - These are used to store commit data.
        - The information stored can include things like the commit message, author, committer, parent commit(s) and more.

      All Git objects are identifiable by a 40-character SHA-1 hash, also known as the "object hash". An object hash
      looks something like this: `e88f7a929cd70b0274c4ea33b209c97fa845fdbc`.

      ### Git Object Storage

      Git objects are stored in the `.git/objects` directory. The path to an object is derived from its hash.

      The path for the object with the hash `e88f7a929cd70b0274c4ea33b209c97fa845fdbc` would be:

      ```bash
      ./git/objects/e8/8f7a929cd70b0274c4ea33b209c97fa845fdbc
      ```

      You'll see that the file isn't placed directly in the `objects` directory. Instead, it's placed in a directory named with the
      first two characters of the object's hash. The remaining 38 characters are used as the file name.

      Each Git object has its own format for storage. We'll look at how Blobs are stored in this stage, and we'll cover
      other objects in future stages.

      ### Blob Object Storage

      Each Git Blob is stored as a separate file in the `.git/objects` directory. The file contains a header and the contents of
      the blob object, compressed using Zlib.

      The format of a blob object file looks like this (after Zlib decompression):

      ```
      blob <size>\0<content>
      ```

      - `<size>` is the size of the content (in bytes)
      - `\0` is a null byte
      - `<content>` is the actual content of the file

      For example, if the contents of a file are `hello world`, the blob object file would look like this (after Zlib decompression):

      ```
      blob 11\0hello world
      ```

      ### The cat-file command

      In this stage, you'll read a blob from a git repository by reading its contents from the `.git/objects` directory.

      You'll do this using the first of multiple ["plumbing" commands](https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain)
      we'll encounter in this challenge: [`git cat-file`](https://git-scm.com/docs/git-cat-file).

      `git cat-file` is used to view the type of an object, its size, and its content. Example usage:

      ```bash
      $ git cat-file -p <blob_sha>
      hello world # This is the contents of the blob
      ```

      ### Tests

      The tester will create a new Git repository and add a blob to the `.git/objects` directory.

      It'll then run your program like this:

      ```bash
      $ ./your_git.sh cat-file -p <blob_sha>
      hello world
      ```

      The tester will verify that the output of your program matches the binary data that the blob contains.

      ### Notes

      - In many programming languages the default print function (like [`fmt.Println`](https://pkg.go.dev/fmt#example-Println))
        will append a newline to the output. The output of `cat-file` must not contain a
        newline at the end, so you might need to use a different function to print the output.

      {{#lang_is_python}}
      - Keep in mind that Git uses [Zlib](https://en.wikipedia.org/wiki/Zlib) to
        compress objects. You can use Python's built-in
        [zlib](https://docs.python.org/3/library/zlib.html) library to read these
        compressed files.
      {{/lang_is_python}}

      {{#lang_is_ruby}}
      - Keep in mind that Git uses [Zlib](https://en.wikipedia.org/wiki/Zlib) to
        compress objects. You can use Ruby's built-in
        [Zlib](https://ruby-doc.org/stdlib-2.7.0/libdoc/zlib/rdoc/Zlib.html)
        library to read these compressed files.
      {{/lang_is_ruby}}

      {{#lang_is_go}}
      - Keep in mind that Git uses [Zlib](https://en.wikipedia.org/wiki/Zlib) to
        compress objects. You can use Go's built-in
        [compress/zlib](https://golang.org/pkg/compress/zlib/) package to read
       these compressed files.
      {{/lang_is_go}}

      {{#lang_is_rust}}
      - Keep in mind that Git uses [Zlib](https://en.wikipedia.org/wiki/Zlib) to
        compress objects. You can use the
        [flate2](https://crates.io/crates/flate2) crate to read these compressed
        files, we've included it in the `Cargo.toml` file.
      {{/lang_is_rust}}

      {{^lang_is_python}}
      {{^lang_is_ruby}}
      {{^lang_is_go}}
      {{^lang_is_rust}}
      - Keep in mind that Git uses [Zlib](https://en.wikipedia.org/wiki/Zlib) to
        compress objects. Many languages have utils for dealing with zlib data in their standard library. If not,
        you might need to use a third-party library to read these compressed files.
      {{/lang_is_rust}}
      {{/lang_is_go}}
      {{/lang_is_ruby}}
      {{/lang_is_python}}

    marketing_md: |-
      In this stage, you'll read a blob from your git repository by fetching its
      contents from the `.git/objects` directory.

      You'll do this using the first of multiple ["plumbing"
      commands](https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain)
      we'll encounter in this challenge: [`git
      cat-file`](https://git-scm.com/docs/git-cat-file).
    tester_source_code_url: "https://github.com/codecrafters-io/git-tester/blob/03984478122959f23a866a0df102413a5ac08e67/internal/stage_read_blob.go#L18"

  - slug: "create_blob"
    name: "Create a blob object"
    difficulty: medium
    description_md: |-
      In the previous stage, we learnt how to read a blob. In this stage, you'll
      add a blob to your git repository by implementing the [`git
      hash-object`](https://git-scm.com/docs/git-hash-object) command.

      Your program will be called like so:

      ```
      ./your_git.sh hash-object -w <file>
      ```

      It is expected to store the data from `<file>` as a blob in `.git/objects`
      and print a 40-char SHA to stdout.

      To verify your implementation, the tester will try to read the blob your
      program wrote. It'll do this using [`git
      cat-file`](https://git-scm.com/docs/git-cat-file), the command you
      implemented in the previous stage.

      ```
      git cat-file -p <blob_sha>
      ```

    marketing_md: |-
      In the previous stage, we learnt how to read a blob. In this stage, we'll
      persist a blob by implementing the `git hash-object` command.
    tester_source_code_url: "https://github.com/codecrafters-io/git-tester/blob/master/internal/stage_create_blob.go"

  - slug: "read_tree"
    name: "Read a tree object"
    difficulty: medium
    description_md: |-
      Now that we've learnt how to read/write blobs, let's move onto our next
      Git object: [the tree](https://developer.github.com/v3/git/trees/).

      In this stage, you'll implement the [`git
      ls-tree`](https://git-scm.com/docs/git-ls-tree) command, which is used to
      inspect a tree object.

      The tester will execute your program like this:

      ```
      ./your_git.sh ls-tree --name-only <tree_sha>
      ```

      For a directory structure like this:

      ```
      your_repo/
        - file1
        - dir1/
          - file_in_dir_1
          - file_in_dir_2
        - dir2/
          - file_in_dir_3
      ```

      The output expected is:

      ```
      dir1
      dir2
      file1
      ```

      (Note that the output is alphabetically sorted, this is how Git stores
      entries in the tree object internally)

      To know more about the internal format of a tree object, checkout [this
      StackOverflow
      question](https://stackoverflow.com/questions/14790681/what-is-the-internal-format-of-a-git-tree-object).

    marketing_md: |-
      Now that we've learnt how to read/write blobs, let's move onto our next
      Git object: [the tree](https://developer.github.com/v3/git/trees/). In
      this stage, you'll read a tree object from storage by implementing the
      `git ls-tree` command.
    tester_source_code_url: "https://github.com/codecrafters-io/git-tester/blob/03984478122959f23a866a0df102413a5ac08e67/internal/stage_read_tree.go#L20"

  - slug: "write_tree"
    name: "Write a tree object"
    difficulty: medium
    description_md: |-
      Now that you know how to read a tree object, let's put your new found
      skills to test - can you _write_ a tree?

      Here's how the tester will invoke your program:

      ```
      ./your_git.sh write-tree
      ```

      You're expected to write the entire working directory as a tree object,
      and print the 40-char SHA.

      Caveat: Unlike the official Git implementation, we aren't going to
      implement a staging area (the place where things go when you run `git
      add`). We'll just assume that all files in the working directory are
      staged. If you're testing this against `git` locally, make sure to run
      `git add .` before `git write-tree`.

      To verify your implementation, the tester will read the tree object from
      the `.git` directory.

    marketing_md: |-
      In this stage, you'll write a tree to git storage by implementing the [`git
      write-tree`](https://git-scm.com/docs/git-write-tree) command.

      To keep things simple, we won't implement an `index`, we'll just assume
      that all changes in the worktree are staged.
    tester_source_code_url: "https://github.com/codecrafters-io/git-tester/blob/03984478122959f23a866a0df102413a5ac08e67/internal/stage_write_tree.go#L21"

  - slug: "create_commit"
    name: "Create a commit"
    difficulty: medium
    description_md: |-
      Let's move on to the last git object we'll be dealing with in this
      challenge: [the commit](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects#_git_commit_objects).

      To create a commit, you'll need the following information:

      - Committer/Author name + email
      - Timestamp
      - Tree SHA
      - Parent commit SHA(s), if any

      In this stage, you'll implement [`git
      commit-tree`](https://git-scm.com/docs/git-commit-tree), a plumbing
      command that creates a commit.

      Your program will be invoked like this:

      ```
      ./your_git.sh commit-tree <tree_sha> -p <commit_sha> -m <message>
      ```

      You'll receive exactly one parent commit, and exactly one line in the
      message. You're free to hardcode any valid name/email for the
      author/committer fields.

      Your program must create a commit object and print its 40-char SHA to
      stdout.

      To verify your changes, the tester will read the commit object from the
      `.git` directory. It'll use the `git show` command to do this.

    marketing_md: |-
      Let's move on to the last git object we'll be dealing with in this
      challenge: the commit. In this stage, you'll create a commit by
      implementing the [`git commit-tree`](https://git-scm.com/docs/git-commit-tree)
      command.
    tester_source_code_url: "https://github.com/codecrafters-io/git-tester/blob/master/internal/stage_create_commit.go"

  - slug: "clone_repository"
    name: "Clone a repository"
    difficulty: hard
    description_md: |-
      This is the last stage of the challenge, and probably the hardest.

      In this stage, you'll clone a public repository from GitHub. To do this,
      you'll use Git's [Smart HTTP transfer
      protocol](https://www.git-scm.com/docs/http-protocol).

      {{#lang_is_rust}}
      You can use the [reqwest](https://crates.io/crates/reqwest) crate to make
      HTTP requests, we've included it in the `Cargo.toml` file.
      {{/lang_is_rust}}

      Your program will be invoked like this:

      ```
      ./your_git.sh clone https://github.com/blah/blah <some_dir>
      ```

      Your program must create `<some_dir>` and clone the given repository into
      it.

      To verify your changes, the tester will do the following:

      - Check the contents of a file
      - Read commit object attributes from the `.git` directory

      To know more about the protocol format, checkout
      [gitprotocol-pack.txt](https://github.com/git/git/blob/795ea8776befc95ea2becd8020c7a284677b4161/Documentation/gitprotocol-pack.txt),
      [gitformat-pack.txt](https://github.com/git/git/blob/795ea8776befc95ea2becd8020c7a284677b4161/Documentation/gitformat-pack.txt),
      and
      [these](https://codewords.recurse.com/issues/three/unpacking-git-packfiles)
      [articles](https://medium.com/@concertdaw/sneaky-git-number-encoding-ddcc5db5329f).

    marketing_md: |-
      This is the last stage of the challenge, and probably the hardest! In this
      stage, you'll clone a public repository from GitHub. To do this, you'll
      use one of Git's [Transfer
      protocols](https://git-scm.com/book/en/v2/Git-Internals-Transfer-Protocols).
    tester_source_code_url: "https://github.com/codecrafters-io/git-tester/blob/03984478122959f23a866a0df102413a5ac08e67/internal/stage_clone_repository.go#L80"
